---

- include_vars: group_vars/kube_cluster.yml

- name: Delete Strace results directory (if it exists)
  become: yes
  file:
    path: "{{ filebench_dir }}/strace_results"
    state: absent

- name: Create Strace results directory
  file:
    path: "{{ filebench_dir }}/strace_results"
    state: directory

- name: Copy fileserver workload
  copy:
    src: ../../shared_files/fileserver.f
    dest: "{{ filebench_dir }}/fileserver.f"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode:  0644

- shell: echo 0 > /proc/sys/kernel/randomize_va_space
  become: yes

- name: Start Dstat
  shell: screen -S "FILEBENCH_STRACE_DSTAT_{{run_number}}" -d -m dstat --time --cpu --mem --net --disk --swap --output "{{ filebench_dir }}/strace_results/dstat.csv"

- name: Pause for 10 secons
  pause:
    seconds: 10

- name: Running filebench (strace) [run={{run_number}}]
  docker_container:
    name: strace_filebench
    image: taniaesteves/filebench_strace:latest
    state: started
    recreate: yes
    detach: false
    pid_mode: host
    hostname: ${HOSTNAME}
    privileged: true
    capabilities:
      - SYS_PTRACE
    volumes:
      - "{{ filebench_dir }}/fileserver.f:/filebench/workloads/fileserver.f"
  register: strace_container

- name: Pause for 10 secons
  pause:
    seconds: 10

- name: Stop dstat
  shell: screen -X -S "FILEBENCH_STRACE_DSTAT_{{run_number}}" quit
  ignore_errors: true

- assert:
    that:
      - "not strace_container.failed"
      - "strace_container.container.State.Status == 'exited'"

- name: Save logs
  shell: docker logs -n 100 strace_filebench > "{{ filebench_dir }}/strace_results/docker_logs.txt" 2>&1

- shell: (cd "{{ filebench_dir }}/strace_results"; find . -maxdepth 1 -type f) | cut -d'/' -f2
  register: files_to_copy

- name: Save results
  fetch:
    src: "{{ filebench_dir }}/strace_results/{{ file_item }}"
    dest: "final_cataio_results/filebench/strace/run_{{run_number}}/"
    flat: yes
  with_items: "{{ files_to_copy.stdout_lines }}"
  loop_control:
    loop_var: file_item
